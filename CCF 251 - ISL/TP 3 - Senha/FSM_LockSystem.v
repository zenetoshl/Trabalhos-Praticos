
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FSM_LockSystem(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	
	 //Parâmetros dos estados
    parameter D0 = 3'b000,
              D1 = 3'b001,
              D2 = 3'b010,
				  D3 = 3'b011,
				  Stop = 3'b100;
	
    //Variáveis relativas aos displays
	 
	reg [3:0] dg0; reg [3:0] next_dg0;
    reg [3:0] dg1; reg [3:0] next_dg1;
    reg [3:0] dg2; reg [3:0] next_dg2;
    reg [3:0] dg3; reg [3:0] next_dg3;
	 
	reg [2:0] cl1; reg [2:0] next_cl1;
	reg [2:0] cl0; reg [2:0] next_cl0;
	 
	reg [2:0] op1; reg [2:0] next_op1;
	reg [2:0] op0; reg [2:0] next_op0;
    
    wire [6:0] dgHEX3; wire [6:0] msgHEX3;
    wire [6:0] dgHEX2; wire [6:0] msgHEX2;
    wire [6:0] dgHEX1; wire [6:0] msgHEX1;
    wire [6:0] dgHEX0; wire [6:0] msgHEX0;
	 
	 reg [2:0] outDisplay; reg [2:0] next_outDisplay;

    //Variáveis relativas às entradas e saídas da máquina de estados
    wire valid, lock, validKey, pwd_error, unlocked;


//=======================================================
//  Structural coding
//=======================================================

	
	lock_system lck_inst(CLOCK_50,lock,validKey,SW[3:0],pwd_error,unlocked);

	digitCheck dgChk_inst(SW[3:0],valid);
	
	BCDto7seg bcd7seg_inst1(dg0[3:0],dgHEX3[6:0]);
	BCDto7seg bcd7seg_inst2(dg1[3:0],dgHEX2[6:0]);
	BCDto7seg bcd7seg_inst3(dg2[3:0],dgHEX1[6:0]);
	BCDto7seg bcd7seg_inst4(dg3[3:0],dgHEX0[6:0]);

    letters let_inst1(3'b001,msgHEX3[6:0]);
    letters let_inst2(3'b101,msgHEX2[6:0]);
    letters let_inst3(3'b101,msgHEX1[6:0]);
    letters let_inst4(3'b110,msgHEX0[6:0]);
	 
	letters let_inst5(cl1[2:0],HEX7[6:0]);
	letters let_inst6(cl0[2:0],HEX6[6:0]);
	 
	letters let_inst7(op1[2:0],HEX5[6:0]);
	letters let_inst8(op0[2:0],HEX4[6:0]);
	
	assign lock = ~KEY[3];
	assign validKey = ~valid | KEY[2];	 

    assign HEX3 = (pwd_error) ? msgHEX3 : dgHEX3;
    assign HEX2 = (pwd_error) ? msgHEX2 : dgHEX2;
    assign HEX1 = (pwd_error) ? msgHEX1 : dgHEX1;
    assign HEX0 = (pwd_error) ? msgHEX0 : dgHEX0;
    
	always @(posedge CLOCK_50) begin
		dg0 = next_dg0;
		dg1 = next_dg1;
		dg2 = next_dg2;
		dg3 = next_dg3;
		  
		cl1 = next_cl1;
		cl0 = next_cl0;
		  
		op1 = next_op1;
	   op0 = next_op0;
		
		outDisplay = next_outDisplay;
	end
	 
	always begin
		  
		if (lock | unlocked) begin
		    next_dg0 = 4'b1111;
		    next_dg1 = 4'b1111;
		    next_dg2 = 4'b1111;
		    next_dg3 = 4'b1111;
			 
		end else begin

			case (outDisplay)
			D0: begin next_dg0 = SW[3:0]; next_dg1 = dg1; next_dg2 = dg2; next_dg3 = dg3; end
			D1: begin next_dg1 = SW[3:0]; next_dg0 = dg0; next_dg2 = dg2; next_dg3 = dg3; end
			D2: begin next_dg2 = SW[3:0]; next_dg0 = dg0; next_dg1 = dg1; next_dg3 = dg3; end
			D3: begin next_dg3 = SW[3:0]; next_dg0 = dg0; next_dg1 = dg1; next_dg2 = dg2; end
			Stop: begin next_dg0 = dg0; next_dg1 = dg1; next_dg2 = dg2; next_dg3 = dg3; end
		   endcase

		end
		  
		if (unlocked) begin
		   next_cl1 = 3'b111;
			next_cl0 = 3'b111;
				
			next_op1 = 3'b000;
			next_op0 = 3'b100;
		end else begin
		   next_cl1 = 3'b011;
			next_cl0 = 3'b010;
				
			next_op1 = 3'b111;
			next_op0 = 3'b111;
		end
		  
	end

	always @(posedge lock or posedge validKey) begin
		if (lock)
			next_outDisplay <= 3'b000;
		else
			next_outDisplay <= outDisplay + 1;
		
	end
	
endmodule
